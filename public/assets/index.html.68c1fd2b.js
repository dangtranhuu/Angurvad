import{_ as n,o as s,c as a,b as t}from"./app.dc9b24b0.js";const p={},o=t(`<p>Danh s\xE1ch \u0111\u1EB7c l\xE0 c\u1EA5u tr\xFAc b\u1EA1n g\u1EB7p ph\u1EA3i r\u1EA5t nhi\u1EC1u, nh\u01B0ng c\xF3 l\u1EBD b\u1EA1n s\u1EBD kh\xF4ng bi\u1EBFt n\u1EBFu ch\u01B0a h\u1ECDc v\u1EC1 DSA.</p><hr><h2 id="danh-sach-lien-ket-la-gi" tabindex="-1"><a class="header-anchor" href="#danh-sach-lien-ket-la-gi" aria-hidden="true">#</a> Danh s\xE1ch li\xEAn k\u1EBFt l\xE0 g\xEC?</h2><p>Danh s\xE1ch li\xEAn k\u1EBFt l\xE0 m\u1ED9t c\u1EA5u tr\xFAc d\u1EEF li\u1EC7u <a href="">tuy\u1EBFn t\xEDnh</a>, trong \u0111\xF3 c\xE1c ph\u1EA7n t\u1EED kh\xF4ng \u0111\u01B0\u1EE3c l\u01B0u tr\u1EEF t\u1EA1i m\u1ED9t v\u1ECB tr\xED li\u1EC1n k\u1EC1, thay v\xE0o \u0111\xF3 ch\xFAng <strong><em>\u0111\u01B0\u1EE3c li\xEAn k\u1EBFt</em></strong> b\u1EB1ng c\xE1ch s\u1EED d\u1EE5ng <a href="">con tr\u1ECF</a>.</p><p>Danh s\xE1ch li\xEAn k\u1EBFt t\u1EA1o th\xE0nh m\u1ED9t lo\u1EA1t c\xE1c n\xFAt \u0111\u01B0\u1EE3c k\u1EBFt n\u1ED1i, trong \u0111\xF3 m\u1ED7i n\xFAt l\u01B0u tr\u1EEF d\u1EEF li\u1EC7u v\xE0 \u0111\u1ECBa ch\u1EC9 c\u1EE7a n\xFAt ti\u1EBFp theo.</p><p>C\u1EA5u tr\xFAc n\xFAt: M\u1ED9t n\xFAt trong danh s\xE1ch li\xEAn k\u1EBFt th\u01B0\u1EDDng bao g\u1ED3m hai th\xE0nh ph\u1EA7n:</p><ul><li>D\u1EEF li\u1EC7u: N\xF3 gi\u1EEF gi\xE1 tr\u1ECB th\u1EF1c t\u1EBF ho\u1EB7c d\u1EEF li\u1EC7u \u0111\u01B0\u1EE3c li\xEAn k\u1EBFt v\u1EDBi n\xFAt.</li><li>Con tr\u1ECF ti\u1EBFp theo: N\xF3 l\u01B0u tr\u1EEF \u0111\u1ECBa ch\u1EC9 b\u1ED9 nh\u1EDB (tham chi\u1EBFu) c\u1EE7a n\xFAt ti\u1EBFp theo trong chu\u1ED7i.</li></ul><p>Head and Tail: Danh s\xE1ch li\xEAn k\u1EBFt \u0111\u01B0\u1EE3c truy c\u1EADp th\xF4ng qua n\xFAt head, tr\u1ECF \u0111\u1EBFn n\xFAt \u0111\u1EA7u ti\xEAn trong danh s\xE1ch.</p><p>N\xFAt cu\u1ED1i c\xF9ng trong danh s\xE1ch tr\u1ECF \u0111\u1EBFn NULL ho\u1EB7c nullptr, cho bi\u1EBFt k\u1EBFt th\xFAc danh s\xE1ch. N\xFAt n\xE0y \u0111\u01B0\u1EE3c g\u1ECDi l\xE0 n\xFAt \u0111u\xF4i.</p><h2 id="tai-sao-can-cau-truc-du-lieu-danh-sach-lien-ket" tabindex="-1"><a class="header-anchor" href="#tai-sao-can-cau-truc-du-lieu-danh-sach-lien-ket" aria-hidden="true">#</a> T\u1EA1i sao c\u1EA7n c\u1EA5u tr\xFAc d\u1EEF li\u1EC7u danh s\xE1ch li\xEAn k\u1EBFt?</h2><p>D\u01B0\u1EDBi \u0111\xE2y l\xE0 m\u1ED9t v\xE0i l\u1EE3i th\u1EBF c\u1EE7a danh s\xE1ch li\xEAn k\u1EBFt \u0111\u01B0\u1EE3c li\u1EC7t k\xEA d\u01B0\u1EDBi \u0111\xE2y, n\xF3 s\u1EBD gi\xFAp b\u1EA1n hi\u1EC3u t\u1EA1i sao c\u1EA7n ph\u1EA3i bi\u1EBFt.</p><ul><li>C\u1EA5u tr\xFAc d\u1EEF li\u1EC7u \u0111\u1ED9ng: K\xEDch th\u01B0\u1EDBc c\u1EE7a b\u1ED9 nh\u1EDB c\xF3 th\u1EC3 \u0111\u01B0\u1EE3c c\u1EA5p ph\xE1t ho\u1EB7c h\u1EE7y ph\xE2n b\u1ED5 t\u1EA1i th\u1EDDi \u0111i\u1EC3m ch\u1EA1y d\u1EF1a tr\xEAn thao t\xE1c ch\xE8n ho\u1EB7c x\xF3a.</li><li>D\u1EC5 d\xE0ng ch\xE8n / x\xF3a: Vi\u1EC7c ch\xE8n v\xE0 x\xF3a c\xE1c ph\u1EA7n t\u1EED \u0111\u01A1n gi\u1EA3n h\u01A1n m\u1EA3ng v\xEC kh\xF4ng c\u1EA7n ph\u1EA3i d\u1ECBch chuy\u1EC3n c\xE1c ph\u1EA7n t\u1EED sau khi ch\xE8n v\xE0 x\xF3a, Ch\u1EC9 c\u1EA7n c\u1EADp nh\u1EADt \u0111\u1ECBa ch\u1EC9.</li><li>S\u1EED d\u1EE5ng b\u1ED9 nh\u1EDB hi\u1EC7u qu\u1EA3: Nh\u01B0 ch\xFAng ta \u0111\xE3 bi\u1EBFt, Danh s\xE1ch li\xEAn k\u1EBFt l\xE0 m\u1ED9t c\u1EA5u tr\xFAc d\u1EEF li\u1EC7u \u0111\u1ED9ng, k\xEDch th\u01B0\u1EDBc t\u0103ng ho\u1EB7c gi\u1EA3m theo y\xEAu c\u1EA7u, v\xEC v\u1EADy \u0111i\u1EC1u n\xE0y tr\xE1nh l\xE3ng ph\xED b\u1ED9 nh\u1EDB.</li><li>Th\u1EF1c hi\u1EC7n: C\xE1c c\u1EA5u tr\xFAc d\u1EEF li\u1EC7u n\xE2ng cao kh\xE1c nhau c\xF3 th\u1EC3 \u0111\u01B0\u1EE3c th\u1EF1c hi\u1EC7n b\u1EB1ng c\xE1ch s\u1EED d\u1EE5ng danh s\xE1ch li\xEAn k\u1EBFt nh\u01B0 ng\u0103n x\u1EBFp, h\xE0ng \u0111\u1EE3i, \u0111\u1ED3 th\u1ECB, b\u1EA3n \u0111\u1ED3 b\u0103m, v.v.</li></ul><details class="custom-container details"><summary>V\xED d\u1EE5</summary><p>Trong m\u1ED9t h\u1EC7 th\u1ED1ng, n\u1EBFu ch\xFAng ta duy tr\xEC m\u1ED9t danh s\xE1ch c\xE1c ID \u0111\u01B0\u1EE3c s\u1EAFp x\u1EBFp trong m\u1ED9t m\u1EA3ng</p><ul><li>id[] = [1000, 1010, 1050, 2000, 2040].</li></ul><p>N\u1EBFu ch\xFAng ta mu\u1ED1n ch\xE8n ID 1005 m\u1EDBi, th\xEC \u0111\u1EC3 duy tr\xEC th\u1EE9 t\u1EF1 \u0111\u01B0\u1EE3c s\u1EAFp x\u1EBFp, ch\xFAng ta ph\u1EA3i di chuy\u1EC3n t\u1EA5t c\u1EA3 c\xE1c ph\u1EA7n t\u1EED sau 1000 (ngo\u1EA1i tr\u1EEB 1000).</p><p>X\xF3a c\u0169ng t\u1ED1n k\xE9m v\u1EDBi c\xE1c m\u1EA3ng cho \u0111\u1EBFn khi tr\u1EEB khi m\u1ED9t s\u1ED1 k\u1EF9 thu\u1EADt \u0111\u1EB7c bi\u1EC7t \u0111\u01B0\u1EE3c s\u1EED d\u1EE5ng. V\xED d\u1EE5: \u0111\u1EC3 x\xF3a 1010 trong id [], m\u1ECDi th\u1EE9 sau 1010 ph\u1EA3i \u0111\u01B0\u1EE3c di chuy\u1EC3n do qu\xE1 nhi\u1EC1u c\xF4ng vi\u1EC7c \u0111ang \u0111\u01B0\u1EE3c th\u1EF1c hi\u1EC7n \u1EA3nh h\u01B0\u1EDFng \u0111\u1EBFn hi\u1EC7u qu\u1EA3 c\u1EE7a m\xE3.</p></details><h2 id="cac-loai-danh-sach-lien-ket" tabindex="-1"><a class="header-anchor" href="#cac-loai-danh-sach-lien-ket" aria-hidden="true">#</a> C\xE1c lo\u1EA1i danh s\xE1ch li\xEAn k\u1EBFt:</h2><p>Ch\u1EE7 y\u1EBFu c\xF3 ba lo\u1EA1i danh s\xE1ch li\xEAn k\u1EBFt:</p><ul><li>Danh s\xE1ch li\xEAn k\u1EBFt \u0111\u01A1n</li><li>Danh s\xE1ch li\xEAn k\u1EBFt k\xE9p</li><li>Danh s\xE1ch li\xEAn k\u1EBFt v\xF2ng tr\xF2n</li></ul><h3 id="_1-danh-sach-lien-ket-\u0111on" tabindex="-1"><a class="header-anchor" href="#_1-danh-sach-lien-ket-\u0111on" aria-hidden="true">#</a> 1. Danh s\xE1ch li\xEAn k\u1EBFt \u0111\u01A1n:</h3><p>Trong m\u1ED9t danh s\xE1ch li\xEAn k\u1EBFt \u0111\u01A1n l\u1EBB, m\u1ED7i n\xFAt ch\u1EE9a m\u1ED9t tham chi\u1EBFu \u0111\u1EBFn n\xFAt ti\u1EBFp theo trong chu\u1ED7i.</p><p>\u0110i qua m\u1ED9t danh s\xE1ch li\xEAn k\u1EBFt \u0111\u01A1n l\u1EBB \u0111\u01B0\u1EE3c th\u1EF1c hi\u1EC7n theo h\u01B0\u1EDBng chuy\u1EC3n ti\u1EBFp.</p><p>H\xECnh minh h\u1ECDa: <img src="https://github.com/dangtranhuu/images/blob/main/angurvad/dsa/session2/Singlelinkedlist.png?raw=true" alt="pic1"></p><h3 id="_2-danh-sach-lien-ket-kep" tabindex="-1"><a class="header-anchor" href="#_2-danh-sach-lien-ket-kep" aria-hidden="true">#</a> 2. Danh s\xE1ch li\xEAn k\u1EBFt k\xE9p:</h3><p>Trong m\u1ED9t danh s\xE1ch li\xEAn k\u1EBFt k\xE9p, m\u1ED7i n\xFAt ch\u1EE9a c\xE1c tham chi\u1EBFu \u0111\u1EBFn c\u1EA3 n\xFAt ti\u1EBFp theo v\xE0 tr\u01B0\u1EDBc \u0111\xF3.</p><p>\u0110i\u1EC1u n\xE0y cho ph\xE9p di chuy\u1EC3n theo c\u1EA3 hai h\u01B0\u1EDBng ti\u1EBFn v\xE0 l\xF9i, nh\u01B0ng n\xF3 \u0111\xF2i h\u1ECFi b\u1ED9 nh\u1EDB b\u1ED5 sung cho tham chi\u1EBFu l\xF9i.</p><p>H\xECnh minh h\u1ECDa: <img src="https://github.com/dangtranhuu/images/blob/main/angurvad/dsa/session2/Doublylinkedlist.png?raw=true" alt="pic1"></p><h3 id="_3-danh-muc-lien-ket-thong-tu" tabindex="-1"><a class="header-anchor" href="#_3-danh-muc-lien-ket-thong-tu" aria-hidden="true">#</a> 3. Danh m\u1EE5c li\xEAn k\u1EBFt th\xF4ng t\u01B0:</h3><p>Trong m\u1ED9t danh s\xE1ch li\xEAn k\u1EBFt tr\xF2n, n\xFAt cu\u1ED1i c\xF9ng tr\u1ECF tr\u1EDF l\u1EA1i n\xFAt \u0111\u1EA7u, t\u1EA1o ra m\u1ED9t c\u1EA5u tr\xFAc tr\xF2n.</p><p>N\xF3 c\xF3 th\u1EC3 \u0111\u01B0\u1EE3c li\xEAn k\u1EBFt \u0111\u01A1n l\u1EBB ho\u1EB7c g\u1EA5p \u0111\xF4i.</p><p>H\xECnh minh h\u1ECDa: <img src="https://github.com/dangtranhuu/images/blob/main/angurvad/dsa/session2/Circularlinkedlist.png?raw=true" alt="pic1"></p><h2 id="hoat-\u0111ong-tren-danh-sach-lien-ket" tabindex="-1"><a class="header-anchor" href="#hoat-\u0111ong-tren-danh-sach-lien-ket" aria-hidden="true">#</a> Ho\u1EA1t \u0111\u1ED9ng tr\xEAn danh s\xE1ch li\xEAn k\u1EBFt</h2><p><strong><em>Ch\xE8n</em></strong>: Th\xEAm m\u1ED9t n\xFAt m\u1EDBi v\xE0o danh s\xE1ch li\xEAn k\u1EBFt li\xEAn quan \u0111\u1EBFn vi\u1EC7c \u0111i\u1EC1u ch\u1EC9nh con tr\u1ECF c\u1EE7a c\xE1c n\xFAt hi\u1EC7n c\xF3 \u0111\u1EC3 duy tr\xEC tr\xECnh t\u1EF1 th\xEDch h\u1EE3p. Vi\u1EC7c ch\xE8n c\xF3 th\u1EC3 \u0111\u01B0\u1EE3c th\u1EF1c hi\u1EC7n \u1EDF \u0111\u1EA7u, cu\u1ED1i ho\u1EB7c b\u1EA5t k\u1EF3 v\u1ECB tr\xED n\xE0o trong danh s\xE1ch</p><p><strong><em>X\xF3a</em></strong>: X\xF3a m\u1ED9t n\xFAt kh\u1ECFi danh s\xE1ch li\xEAn k\u1EBFt y\xEAu c\u1EA7u \u0111i\u1EC1u ch\u1EC9nh con tr\u1ECF c\u1EE7a c\xE1c n\xFAt l\xE2n c\u1EADn \u0111\u1EC3 thu h\u1EB9p kho\u1EA3ng c\xE1ch do n\xFAt \u0111\xE3 x\xF3a \u0111\u1EC3 l\u1EA1i. X\xF3a c\xF3 th\u1EC3 \u0111\u01B0\u1EE3c th\u1EF1c hi\u1EC7n \u1EDF \u0111\u1EA7u, cu\u1ED1i ho\u1EB7c b\u1EA5t k\u1EF3 v\u1ECB tr\xED n\xE0o trong danh s\xE1ch.</p><p><strong><em>T\xECm ki\u1EBFm</em></strong>: T\xECm ki\u1EBFm m\u1ED9t gi\xE1 tr\u1ECB c\u1EE5 th\u1EC3 trong danh s\xE1ch li\xEAn k\u1EBFt li\xEAn quan \u0111\u1EBFn vi\u1EC7c \u0111i qua danh s\xE1ch t\u1EEB n\xFAt \u0111\u1EA7u cho \u0111\u1EBFn khi t\xECm th\u1EA5y gi\xE1 tr\u1ECB ho\u1EB7c \u0111\u1EA1t \u0111\u1EBFn cu\u1ED1i danh s\xE1ch.</p><h2 id="uu-\u0111iem-cua-danh-sach-lien-ket" tabindex="-1"><a class="header-anchor" href="#uu-\u0111iem-cua-danh-sach-lien-ket" aria-hidden="true">#</a> \u01AFu \u0111i\u1EC3m c\u1EE7a danh s\xE1ch li\xEAn k\u1EBFt</h2><p><strong><em>K\xEDch th\u01B0\u1EDBc \u0111\u1ED9ng</em></strong>: Danh s\xE1ch li\xEAn k\u1EBFt c\xF3 th\u1EC3 t\u0103ng ho\u1EB7c thu nh\u1ECF \u0111\u1ED9ng, v\xEC ph\xE2n b\u1ED5 b\u1ED9 nh\u1EDB \u0111\u01B0\u1EE3c th\u1EF1c hi\u1EC7n trong th\u1EDDi gian ch\u1EA1y.</p><p><strong><em>Ch\xE8n v\xE0 x\xF3a</em></strong>: Th\xEAm ho\u1EB7c x\xF3a c\xE1c y\u1EBFu t\u1ED1 kh\u1ECFi danh s\xE1ch li\xEAn k\u1EBFt l\xE0 hi\u1EC7u qu\u1EA3, \u0111\u1EB7c bi\u1EC7t l\xE0 \u0111\u1ED1i v\u1EDBi c\xE1c danh s\xE1ch l\u1EDBn.</p><p><strong><em>Linh ho\u1EA1t</em></strong>: Danh s\xE1ch li\xEAn k\u1EBFt c\xF3 th\u1EC3 d\u1EC5 d\xE0ng t\u1ED5 ch\u1EE9c l\u1EA1i v\xE0 s\u1EEDa \u0111\u1ED5i m\xE0 kh\xF4ng y\xEAu c\u1EA7u kh\u1ED1i b\u1ED9 nh\u1EDB li\u1EC1n k\u1EC1. Nh\u01B0\u1EE3c \u0111i\u1EC3m c\u1EE7a danh s\xE1ch li\xEAn k\u1EBFt</p><p><strong><em>Truy c\u1EADp ng\u1EABu nhi\xEAn</em></strong>: Kh\xF4ng gi\u1ED1ng nh\u01B0 m\u1EA3ng, danh s\xE1ch li\xEAn k\u1EBFt kh\xF4ng cho ph\xE9p truy c\u1EADp tr\u1EF1c ti\u1EBFp v\xE0o c\xE1c ph\u1EA7n t\u1EED theo ch\u1EC9 m\u1EE5c. Traversal l\xE0 c\u1EA7n thi\u1EBFt \u0111\u1EC3 \u0111\u1EA1t \u0111\u01B0\u1EE3c m\u1ED9t n\xFAt c\u1EE5 th\u1EC3.</p><p><strong><em>B\u1ED9 nh\u1EDB th\xEAm</em></strong>: Danh s\xE1ch n\u1ED1i k\u1EBFt y\xEAu c\u1EA7u b\u1ED9 nh\u1EDB b\u1ED5 sung \u0111\u1EC3 l\u01B0u tr\u1EEF con tr\u1ECF, so v\u1EDBi m\u1EA3ng.</p><h2 id="thuc-hanh" tabindex="-1"><a class="header-anchor" href="#thuc-hanh" aria-hidden="true">#</a> Th\u1EF1c h\xE0nh</h2><h3 id="su-dung-linkedlist-h" tabindex="-1"><a class="header-anchor" href="#su-dung-linkedlist-h" aria-hidden="true">#</a> S\u1EED d\u1EE5ng linkedList.h</h3><p>C\u1EA5u tr\xFAc c\u1EE7a DSLK</p><details class="custom-container details"><summary>Code</summary><div class="language-c ext-c"><pre class="language-c"><code><span class="token keyword">struct</span> <span class="token class-name">NODE</span><span class="token punctuation">{</span>
    <span class="token keyword">int</span> data<span class="token punctuation">;</span>
    <span class="token keyword">struct</span> <span class="token class-name">NODE</span><span class="token operator">*</span> Next<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">NODE</span> Node<span class="token punctuation">;</span>
<span class="token keyword">typedef</span> <span class="token keyword">struct</span><span class="token punctuation">{</span>
    Node <span class="token operator">*</span>Head<span class="token punctuation">;</span>
    Node <span class="token operator">*</span>Tail<span class="token punctuation">;</span>
    <span class="token keyword">int</span> Size<span class="token punctuation">;</span>
<span class="token punctuation">}</span>List<span class="token punctuation">;</span>
</code></pre></div></details><p>Kh\u1EDFi t\u1EA1o danh s\xE1ch r\u1ED7ng</p><details class="custom-container details"><summary>Code</summary><div class="language-c ext-c"><pre class="language-c"><code><span class="token keyword">void</span> <span class="token function">makeNullList</span><span class="token punctuation">(</span>List <span class="token operator">*</span>L<span class="token punctuation">)</span><span class="token punctuation">{</span>
    L<span class="token operator">-&gt;</span>Head <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
    L<span class="token operator">-&gt;</span>Tail <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
    L<span class="token operator">-&gt;</span>Size <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div></details><p>Hi\u1EC3n th\u1ECB danh s\xE1ch</p><details class="custom-container details"><div class="language-c ext-c"><pre class="language-c"><code><span class="token keyword">void</span> <span class="token function">displayList</span><span class="token punctuation">(</span>List L<span class="token punctuation">)</span><span class="token punctuation">{</span>
    Node <span class="token operator">*</span>temp <span class="token operator">=</span> L<span class="token punctuation">.</span>Head<span class="token punctuation">;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>temp <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%d &quot;</span><span class="token punctuation">,</span>temp<span class="token operator">-&gt;</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>
        temp <span class="token operator">=</span> temp<span class="token operator">-&gt;</span>Next<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;Size = %d&quot;</span><span class="token punctuation">,</span>L<span class="token punctuation">.</span>Size<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div></details><p>T\u1EA1o node (n\xFAt)</p><details class="custom-container details"><summary>Code</summary><div class="language-c ext-c"><pre class="language-c"><code>Node <span class="token operator">*</span><span class="token function">createNode</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span><span class="token punctuation">{</span>
    Node <span class="token operator">*</span>newnode <span class="token operator">=</span> <span class="token punctuation">(</span>Node <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>Node<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    newnode<span class="token operator">-&gt;</span>data <span class="token operator">=</span> x<span class="token punctuation">;</span>
    newnode<span class="token operator">-&gt;</span>Next <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> newnode<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div></details><p>Th\xEAm node v\xE0o \u0111\u1EA7u ho\u1EB7c cu\u1ED1i danh s\xE1ch</p><details class="custom-container details"><summary>Code</summary><div class="language-c ext-c"><pre class="language-c"><code><span class="token keyword">void</span> <span class="token function">insertList_Frist</span><span class="token punctuation">(</span>Node <span class="token operator">*</span>newNode<span class="token punctuation">,</span>List <span class="token operator">*</span>L<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>L<span class="token operator">-&gt;</span>Head <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        L<span class="token operator">-&gt;</span>Head <span class="token operator">=</span> newNode<span class="token punctuation">;</span>
        L<span class="token operator">-&gt;</span>Tail <span class="token operator">=</span> newNode<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">else</span><span class="token punctuation">{</span>
        newNode<span class="token operator">-&gt;</span>Next <span class="token operator">=</span> L<span class="token operator">-&gt;</span>Head<span class="token punctuation">;</span>
        L<span class="token operator">-&gt;</span>Head <span class="token operator">=</span> newNode<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    L<span class="token operator">-&gt;</span>Size<span class="token operator">++</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">insertList_End</span><span class="token punctuation">(</span>Node <span class="token operator">*</span>newNode<span class="token punctuation">,</span>List <span class="token operator">*</span>L<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>L<span class="token operator">-&gt;</span>Head <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        L<span class="token operator">-&gt;</span>Head <span class="token operator">=</span> newNode<span class="token punctuation">;</span>
        L<span class="token operator">-&gt;</span>Tail <span class="token operator">=</span> newNode<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">else</span><span class="token punctuation">{</span>
        L<span class="token operator">-&gt;</span>Tail<span class="token operator">-&gt;</span>Next <span class="token operator">=</span> newNode<span class="token punctuation">;</span>
        L<span class="token operator">-&gt;</span>Tail<span class="token operator">=</span>newNode<span class="token punctuation">;</span>
        newNode<span class="token operator">-&gt;</span>Next <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    L<span class="token operator">-&gt;</span>Size<span class="token operator">++</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div></details><p>Th\xEAm node v\xE0o v\u1ECB tr\xED P trong danh s\xE1ch</p><details class="custom-container details"><summary>Code</summary><div class="language-c ext-c"><pre class="language-c"><code><span class="token keyword">void</span> <span class="token function">insertList_byPos</span><span class="token punctuation">(</span><span class="token keyword">int</span> p<span class="token punctuation">,</span>Node <span class="token operator">*</span>newNode<span class="token punctuation">,</span>List <span class="token operator">*</span>L<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>p <span class="token operator">&lt;</span> <span class="token number">1</span> <span class="token operator">||</span> L<span class="token operator">-&gt;</span>Head <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token function">insertList_Frist</span><span class="token punctuation">(</span>newNode<span class="token punctuation">,</span>L<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>p <span class="token operator">&gt;=</span> L<span class="token operator">-&gt;</span>Size<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token function">insertList_End</span><span class="token punctuation">(</span>newNode<span class="token punctuation">,</span>L<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">else</span><span class="token punctuation">{</span>
        Node <span class="token operator">*</span>temp <span class="token operator">=</span> L<span class="token operator">-&gt;</span>Head<span class="token punctuation">;</span>
        <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">while</span><span class="token punctuation">(</span>temp <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>p <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">==</span> i<span class="token punctuation">)</span><span class="token punctuation">{</span>
                newNode<span class="token operator">-&gt;</span>Next <span class="token operator">=</span> temp<span class="token operator">-&gt;</span>Next<span class="token punctuation">;</span>
                temp<span class="token operator">-&gt;</span>Next <span class="token operator">=</span> newNode<span class="token punctuation">;</span>
                L<span class="token operator">-&gt;</span>Size<span class="token operator">++</span><span class="token punctuation">;</span>
                <span class="token keyword">return</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            i<span class="token operator">++</span><span class="token punctuation">;</span>
            temp <span class="token operator">=</span> temp<span class="token operator">-&gt;</span>Next<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div></details><p>Th\xEAm N Node v\xE0o danh s\xE1ch</p><details class="custom-container details"><summary>Code</summary><div class="language-c ext-c"><pre class="language-c"><code><span class="token keyword">void</span> <span class="token function">inputList</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">,</span>List <span class="token operator">*</span>L<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">int</span> x<span class="token punctuation">;</span>
    Node <span class="token operator">*</span>temp<span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">&quot;%d&quot;</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>
        temp <span class="token operator">=</span> <span class="token function">createNode</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">insertList_byPos</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span>temp<span class="token punctuation">,</span>L<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div></details><p>Ki\u1EC3m tra X trong danh s\xE1ch</p><details class="custom-container details"><summary>Code</summary><div class="language-c ext-c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">memberList</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span>List L<span class="token punctuation">)</span><span class="token punctuation">{</span>
    Node <span class="token operator">*</span>temp <span class="token operator">=</span> L<span class="token punctuation">.</span>Head<span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>temp <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>temp<span class="token operator">-&gt;</span>data <span class="token operator">==</span> x<span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        temp <span class="token operator">=</span> temp<span class="token operator">-&gt;</span>Next<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div></details><p>T\xECm v\u1ECB tr\xED Node ch\u1EE9a X</p><details class="custom-container details"><summary>Code</summary><div class="language-c ext-c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">locateList</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span>List L<span class="token punctuation">)</span><span class="token punctuation">{</span>
    Node <span class="token operator">*</span>temp <span class="token operator">=</span> L<span class="token punctuation">.</span>Head<span class="token punctuation">;</span>
    <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>temp <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>temp<span class="token operator">-&gt;</span>data <span class="token operator">=</span> x<span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token function">free</span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> i<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">else</span><span class="token punctuation">{</span>
            i<span class="token operator">++</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        temp <span class="token operator">=</span> temp<span class="token operator">-&gt;</span>Next<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token function">free</span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div></details><p>X\xF3a Node c\xF3 v\u1ECB tr\xED P trong danh s\xE1ch</p><details class="custom-container details"><summary>Code</summary><div class="language-c ext-c"><pre class="language-c"><code><span class="token keyword">void</span> <span class="token function">deleteList_byPos</span><span class="token punctuation">(</span><span class="token keyword">int</span> p<span class="token punctuation">,</span>List <span class="token operator">*</span>L<span class="token punctuation">)</span><span class="token punctuation">{</span>
    Node <span class="token operator">*</span>temp <span class="token operator">=</span> L<span class="token operator">-&gt;</span>Head<span class="token punctuation">;</span>
    Node <span class="token operator">*</span>prev <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>temp <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>p <span class="token operator">==</span> i<span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>prev<span class="token operator">==</span><span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                L<span class="token operator">-&gt;</span>Head<span class="token operator">=</span>temp<span class="token operator">-&gt;</span>Next<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">else</span><span class="token punctuation">{</span>
                prev<span class="token operator">-&gt;</span>Next<span class="token operator">=</span>temp<span class="token operator">-&gt;</span>Next<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            L<span class="token operator">-&gt;</span>Size<span class="token operator">--</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">else</span><span class="token punctuation">{</span>
            i<span class="token operator">++</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        prev <span class="token operator">=</span> temp<span class="token punctuation">;</span>
        temp <span class="token operator">=</span> temp<span class="token operator">-&gt;</span>Next<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div></details><p>X\xF3a node trong danh s\xE1ch</p><details class="custom-container details"><summary>Code</summary><div class="language-c ext-c"><pre class="language-c"><code><span class="token keyword">void</span> <span class="token function">deleteList_byNode</span><span class="token punctuation">(</span>Node<span class="token operator">*</span> newNode<span class="token punctuation">,</span>List <span class="token operator">*</span>L<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    Node <span class="token operator">*</span>temp <span class="token operator">=</span> L<span class="token operator">-&gt;</span>Head<span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>temp <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>newNode <span class="token operator">==</span> temp<span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token function">deleteList_byPos</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span>L<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">else</span><span class="token punctuation">{</span>
            i<span class="token operator">++</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        temp <span class="token operator">=</span> temp<span class="token operator">-&gt;</span>Next<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div></details><p>X\xF3a Node c\xF3 ph\u1EA7n t\u1EED X trong danh s\xE1ch</p><details class="custom-container details"><summary>Code</summary><div class="language-c ext-c"><pre class="language-c"><code><span class="token keyword">void</span> <span class="token function">deleteList_byNode</span><span class="token punctuation">(</span>Node<span class="token operator">*</span> newNode<span class="token punctuation">,</span>List <span class="token operator">*</span>L<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    Node <span class="token operator">*</span>temp <span class="token operator">=</span> L<span class="token operator">-&gt;</span>Head<span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>temp <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>newNode <span class="token operator">==</span> temp<span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token function">deleteList_byPos</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span>L<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">else</span><span class="token punctuation">{</span>
            i<span class="token operator">++</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        temp <span class="token operator">=</span> temp<span class="token operator">-&gt;</span>Next<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div></details><p>T\u1ED1i \u01B0u danh s\xE1ch 121 -&gt; 12</p><details class="custom-container details"><summary>Code</summary><div class="language-c ext-c"><pre class="language-c"><code><span class="token keyword">void</span> <span class="token function">optimizeList</span><span class="token punctuation">(</span>List <span class="token operator">*</span>L<span class="token punctuation">)</span><span class="token punctuation">{</span>
    Node <span class="token operator">*</span>temp1 <span class="token operator">=</span> L<span class="token operator">-&gt;</span>Head<span class="token punctuation">;</span>
    Node <span class="token operator">*</span>temp2 <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>temp1<span class="token operator">-&gt;</span>Next <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        temp2 <span class="token operator">=</span> temp1<span class="token operator">-&gt;</span>Next<span class="token punctuation">;</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span>temp2 <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>temp1<span class="token operator">-&gt;</span>data <span class="token operator">==</span> temp2<span class="token operator">-&gt;</span>data<span class="token punctuation">)</span><span class="token punctuation">{</span>
                <span class="token function">deleteList_byNode</span><span class="token punctuation">(</span>temp2<span class="token punctuation">,</span>L<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            temp2 <span class="token operator">=</span> temp2<span class="token operator">-&gt;</span>Next<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        temp1 <span class="token operator">=</span> temp1<span class="token operator">-&gt;</span>Next<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div></details><p>T\xECm Node c\xF3 ph\u1EA7n t\u1EED l\u1EDBn nh\u1EA5t ho\u1EB7c nh\u1ECF nh\u1EA5t</p><details class="custom-container details"><summary>Code</summary><div class="language-c ext-c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">Find_Max</span><span class="token punctuation">(</span>List L<span class="token punctuation">)</span><span class="token punctuation">{</span>
    Node <span class="token operator">*</span>temp<span class="token operator">=</span>L<span class="token punctuation">.</span>Head<span class="token punctuation">;</span>
    <span class="token keyword">int</span> max<span class="token operator">=</span>temp<span class="token operator">-&gt;</span>data<span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>temp<span class="token operator">!=</span><span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>max<span class="token operator">&lt;</span>temp<span class="token operator">-&gt;</span>data<span class="token punctuation">)</span><span class="token punctuation">{</span>
            max<span class="token operator">=</span>temp<span class="token operator">-&gt;</span>data<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        temp<span class="token operator">=</span>temp<span class="token operator">-&gt;</span>Next<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token function">free</span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> max<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">Find_Min</span><span class="token punctuation">(</span>List L<span class="token punctuation">)</span><span class="token punctuation">{</span>
    Node <span class="token operator">*</span>temp<span class="token operator">=</span>L<span class="token punctuation">.</span>Head<span class="token punctuation">;</span>
    <span class="token keyword">int</span> min<span class="token operator">=</span>temp<span class="token operator">-&gt;</span>data<span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>temp<span class="token operator">!=</span><span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>min<span class="token operator">&gt;</span>temp<span class="token operator">-&gt;</span>data<span class="token punctuation">)</span><span class="token punctuation">{</span>
            min<span class="token operator">=</span>temp<span class="token operator">-&gt;</span>data<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        temp<span class="token operator">=</span>temp<span class="token operator">-&gt;</span>Next<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token function">free</span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> min<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div></details><p>Chuy\u1EC3n sang danh s\xE1ch kh\xE1c</p><details class="custom-container details"><summary>Code</summary><div class="language-c ext-c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">Find_Max</span><span class="token punctuation">(</span>List L<span class="token punctuation">)</span><span class="token punctuation">{</span>
    Node <span class="token operator">*</span>temp<span class="token operator">=</span>L<span class="token punctuation">.</span>Head<span class="token punctuation">;</span>
    <span class="token keyword">int</span> max<span class="token operator">=</span>temp<span class="token operator">-&gt;</span>data<span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>temp<span class="token operator">!=</span><span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>max<span class="token operator">&lt;</span>temp<span class="token operator">-&gt;</span>data<span class="token punctuation">)</span><span class="token punctuation">{</span>
            max<span class="token operator">=</span>temp<span class="token operator">-&gt;</span>data<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        temp<span class="token operator">=</span>temp<span class="token operator">-&gt;</span>Next<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token function">free</span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> max<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">Find_Min</span><span class="token punctuation">(</span>List L<span class="token punctuation">)</span><span class="token punctuation">{</span>
    Node <span class="token operator">*</span>temp<span class="token operator">=</span>L<span class="token punctuation">.</span>Head<span class="token punctuation">;</span>
    <span class="token keyword">int</span> min<span class="token operator">=</span>temp<span class="token operator">-&gt;</span>data<span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>temp<span class="token operator">!=</span><span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>min<span class="token operator">&gt;</span>temp<span class="token operator">-&gt;</span>data<span class="token punctuation">)</span><span class="token punctuation">{</span>
            min<span class="token operator">=</span>temp<span class="token operator">-&gt;</span>data<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        temp<span class="token operator">=</span>temp<span class="token operator">-&gt;</span>Next<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token function">free</span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> min<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div></details><p>G\u1ED9p hai danh s\xE1ch th\xE0nh 1 danh s\xE1ch</p><details class="custom-container details"><summary>Code</summary><div class="language-c ext-c"><pre class="language-c"><code><span class="token keyword">void</span> <span class="token function">mergeList</span><span class="token punctuation">(</span>List L1<span class="token punctuation">,</span>List L2<span class="token punctuation">,</span>List <span class="token operator">*</span>L<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token function">changeList</span><span class="token punctuation">(</span>L1<span class="token punctuation">,</span>L<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">changeList</span><span class="token punctuation">(</span>L2<span class="token punctuation">,</span>L<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div></details><p>L\u1ECDc s\u1ED1 ch\u1EB5n l\u1EBD qua danh s\xE1ch</p><details class="custom-container details"><summary>Code</summary><div class="language-c ext-c"><pre class="language-c"><code><span class="token keyword">void</span> <span class="token function">filter_evenNumber</span><span class="token punctuation">(</span>List L1<span class="token punctuation">,</span> List <span class="token operator">*</span>L<span class="token punctuation">)</span><span class="token punctuation">{</span>
    Node <span class="token operator">*</span>temp <span class="token operator">=</span> L1<span class="token punctuation">.</span>Head<span class="token punctuation">;</span>
    <span class="token keyword">int</span> i <span class="token operator">=</span> L<span class="token operator">-&gt;</span>Size<span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>temp <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>temp<span class="token operator">-&gt;</span>data <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token function">insertList_byPos</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span><span class="token function">createNode</span><span class="token punctuation">(</span>temp<span class="token operator">-&gt;</span>data<span class="token punctuation">)</span><span class="token punctuation">,</span>L<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        i<span class="token operator">++</span><span class="token punctuation">;</span>
        temp <span class="token operator">=</span> temp<span class="token operator">-&gt;</span>Next<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">filter_oddNumber</span><span class="token punctuation">(</span>List L1<span class="token punctuation">,</span> List <span class="token operator">*</span>L<span class="token punctuation">)</span><span class="token punctuation">{</span>
    Node <span class="token operator">*</span>temp <span class="token operator">=</span> L1<span class="token punctuation">.</span>Head<span class="token punctuation">;</span>
    <span class="token keyword">int</span> i <span class="token operator">=</span> L<span class="token operator">-&gt;</span>Size<span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>temp <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>temp<span class="token operator">-&gt;</span>data <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token function">insertList_byPos</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span><span class="token function">createNode</span><span class="token punctuation">(</span>temp<span class="token operator">-&gt;</span>data<span class="token punctuation">)</span><span class="token punctuation">,</span>L<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        i<span class="token operator">++</span><span class="token punctuation">;</span>
        temp <span class="token operator">=</span> temp<span class="token operator">-&gt;</span>Next<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div></details><p>T\xEDnh t\u1ED5ng s\u1ED1 trung b\xECnh ph\u1EA7n t\u1EED trong danh s\xE1ch</p><details class="custom-container details"><summary>Code</summary><div class="language-c ext-c"><pre class="language-c"><code><span class="token keyword">double</span> <span class="token function">averageList</span><span class="token punctuation">(</span>List L<span class="token punctuation">)</span><span class="token punctuation">{</span>
    Node <span class="token operator">*</span>temp <span class="token operator">=</span> L<span class="token punctuation">.</span>Head<span class="token punctuation">;</span>
    <span class="token keyword">double</span> result <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>temp <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        result <span class="token operator">+=</span> temp<span class="token operator">-&gt;</span>data<span class="token punctuation">;</span>
        temp <span class="token operator">=</span> temp<span class="token operator">-&gt;</span>Next<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> result<span class="token operator">/</span>L<span class="token punctuation">.</span>Size<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div></details><h3 id="su-dung-sentencelist-h" tabindex="-1"><a class="header-anchor" href="#su-dung-sentencelist-h" aria-hidden="true">#</a> S\u1EED d\u1EE5ng sentenceList.h</h3><p>Ch\u01B0a c\u1EADp nh\u1EADt</p><h2 id="ket-thuc" tabindex="-1"><a class="header-anchor" href="#ket-thuc" aria-hidden="true">#</a> K\u1EBFt th\xFAc:</h2><p>Danh s\xE1ch li\xEAn k\u1EBFt l\xE0 c\xE1c c\u1EA5u tr\xFAc d\u1EEF li\u1EC7u linh ho\u1EA1t cung c\u1EA5p ph\xE2n b\u1ED5 b\u1ED9 nh\u1EDB \u0111\u1ED9ng v\xE0 c\xE1c ho\u1EA1t \u0111\u1ED9ng ch\xE8n v\xE0 x\xF3a hi\u1EC7u qu\u1EA3.</p><p>Hi\u1EC3u nh\u1EEFng \u0111i\u1EC1u c\u01A1 b\u1EA3n c\u1EE7a danh s\xE1ch li\xEAn k\u1EBFt l\xE0 \u0111i\u1EC1u c\u1EA7n thi\u1EBFt cho b\u1EA5t k\u1EF3 l\u1EADp tr\xECnh vi\xEAn ho\u1EB7c ng\u01B0\u1EDDi \u0111am m\xEA khoa h\u1ECDc m\xE1y t\xEDnh n\xE0o.</p><p>V\u1EDBi ki\u1EBFn th\u1EE9c n\xE0y, b\u1EA1n c\xF3 th\u1EC3 tri\u1EC3n khai c\xE1c danh s\xE1ch li\xEAn k\u1EBFt \u0111\u1EC3 gi\u1EA3i quy\u1EBFt c\xE1c v\u1EA5n \u0111\u1EC1 kh\xE1c nhau v\xE0 m\u1EDF r\u1ED9ng hi\u1EC3u bi\u1EBFt v\u1EC1 c\u1EA5u tr\xFAc d\u1EEF li\u1EC7u v\xE0 thu\u1EADt to\xE1n.</p>`,82),e=[o];function c(u,l){return s(),a("div",null,e)}var k=n(p,[["render",c],["__file","index.html.vue"]]);export{k as default};
